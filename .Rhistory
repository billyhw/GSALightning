x[x[,5]=='-' | x[,5] == '',5] <- 0 # missing frequency are set to 0
x[,5] <- as.numeric(x[,5]) # turn frequency to numerics
# create weight matrix
#wtMat <- matrix(0,length(unique(x[,1])),length(unique(x[,3])))
#wtMat[cbind(rowInd,colInd)] <- x[,5]
wtMat <- sparseMatrix(i=rowInd,j=colInd,x=x[,5])
# assign row and column names as diseases and phenotypes
rownames(wtMat) <- levels(disease)
colnames(wtMat) <- levels(phenotype)
wtMatNaive <- wtMat[rownames(wtMat) %in% unique(diseaseStatus),]
wtMatNaive[wtMatNaive>0] <- 1
diseaseWtNaive <- wtMatNaive%*%t(patientMat[trainInd==0,])
diseaseWtNaive <- t(diseaseWtNaive)
diseaseWtNaive <- as.matrix(diseaseWtNaive)
# write.table(diseaseWtNaive)
diseaseStatus <- diseaseStatus[trainInd==0]
# get ranking
rankvecNaive <- rep(NA,nrow(diseaseWtNaive))
for (i in 1:nrow(diseaseWtNaive)) {
try(rankvecNaive[i] <- which(names(sort(diseaseWtNaive[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
par(mfrow=c(1,2))
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
#### Naive Bayes Results ####
diseaseWtNB <- t(prob)
rankvecNB <- rep(NA,nrow(diseaseWtNB))
for (i in 1:nrow(diseaseWtNB)) {
try(rankvecNB[i] <- which(names(sort(diseaseWtNB[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
library(data.table)  # to install use install.packages('data.table')
library(Matrix)
library(bnlearn)
load("~/tianLab/lzx/patientMat.RData")
#patientMat <- Matrix(patientMat)
diseaseStatus <- paste('OMIM',rep(list.files(path = "~/tianLab/lzx/simulated_patients"),each=100),sep=':')
trainInd <- sample(rep(1,1000),rep(0,3400))
patientMatNB <- patientMat[,colSums(patientMat) != 0]
dat <- as.data.frame(cbind(diseaseStatus,patientMatNB))
for (i in 1:ncol(dat)) dat[,i] <- as.factor(dat[,i])
fit <- naive.bayes(dat[trainInd==1,],'diseaseStatus')
pred <- predict(fit, dat[trainInd==0,], prob=T)
prob <- attr(pred,'prob')
#cv <- bn.cv(dat,fit)
library(Matrix)
x <- fread('~/tianLab/lzx/LZX/Predict_Value_ForNoAvailable.txt',sep='\t')
x <- as.data.frame(x)
x <- x[-which(x[,1]=='OMIMID'),] # one weird row, remove
# create disease-HPO frequency matrix
disease <- factor(x[,1]) # turn disease status to a factor
phenotype <- factor(x[,3]) # turn phenotype status to a factor
rowInd <- as.numeric(factor(x[,1])) # obtain row indices
colInd <- as.numeric(factor(x[,3])) # obtain column indices
x[x[,5]=='-' | x[,5] == '',5] <- 0 # missing frequency are set to 0
x[,5] <- as.numeric(x[,5]) # turn frequency to numerics
# create weight matrix
#wtMat <- matrix(0,length(unique(x[,1])),length(unique(x[,3])))
#wtMat[cbind(rowInd,colInd)] <- x[,5]
wtMat <- sparseMatrix(i=rowInd,j=colInd,x=x[,5])
# assign row and column names as diseases and phenotypes
rownames(wtMat) <- levels(disease)
colnames(wtMat) <- levels(phenotype)
wtMatNaive <- wtMat[rownames(wtMat) %in% unique(diseaseStatus),]
wtMatNaive[wtMatNaive>0] <- 1
diseaseWtNaive <- wtMatNaive%*%t(patientMat[trainInd==0,])
diseaseWtNaive <- t(diseaseWtNaive)
diseaseWtNaive <- as.matrix(diseaseWtNaive)
# write.table(diseaseWtNaive)
diseaseStatus <- diseaseStatus[trainInd==0]
# get ranking
rankvecNaive <- rep(NA,nrow(diseaseWtNaive))
for (i in 1:nrow(diseaseWtNaive)) {
try(rankvecNaive[i] <- which(names(sort(diseaseWtNaive[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
par(mfrow=c(1,2))
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
#### Naive Bayes Results ####
diseaseWtNB <- t(prob)
rankvecNB <- rep(NA,nrow(diseaseWtNB))
for (i in 1:nrow(diseaseWtNB)) {
try(rankvecNB[i] <- which(names(sort(diseaseWtNB[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
pred
library(data.table)  # to install use install.packages('data.table')
library(Matrix)
library(bnlearn)
load("~/tianLab/lzx/patientMat.RData")
#patientMat <- Matrix(patientMat)
diseaseStatus <- paste('OMIM',rep(list.files(path = "~/tianLab/lzx/simulated_patients"),each=100),sep=':')
trainInd <- sample(c(rep(1,1000),rep(0,3400)))
patientMatNB <- patientMat[,colSums(patientMat) != 0]
dat <- as.data.frame(cbind(diseaseStatus,patientMatNB))
for (i in 1:ncol(dat)) dat[,i] <- as.factor(dat[,i])
fit <- naive.bayes(dat[trainInd==1,],'diseaseStatus')
pred <- predict(fit, dat[trainInd==0,], prob=T)
prob <- attr(pred,'prob')
#cv <- bn.cv(dat,fit)
library(Matrix)
x <- fread('~/tianLab/lzx/LZX/Predict_Value_ForNoAvailable.txt',sep='\t')
x <- as.data.frame(x)
x <- x[-which(x[,1]=='OMIMID'),] # one weird row, remove
# create disease-HPO frequency matrix
disease <- factor(x[,1]) # turn disease status to a factor
phenotype <- factor(x[,3]) # turn phenotype status to a factor
rowInd <- as.numeric(factor(x[,1])) # obtain row indices
colInd <- as.numeric(factor(x[,3])) # obtain column indices
x[x[,5]=='-' | x[,5] == '',5] <- 0 # missing frequency are set to 0
x[,5] <- as.numeric(x[,5]) # turn frequency to numerics
# create weight matrix
#wtMat <- matrix(0,length(unique(x[,1])),length(unique(x[,3])))
#wtMat[cbind(rowInd,colInd)] <- x[,5]
wtMat <- sparseMatrix(i=rowInd,j=colInd,x=x[,5])
# assign row and column names as diseases and phenotypes
rownames(wtMat) <- levels(disease)
colnames(wtMat) <- levels(phenotype)
wtMatNaive <- wtMat[rownames(wtMat) %in% unique(diseaseStatus),]
wtMatNaive[wtMatNaive>0] <- 1
diseaseWtNaive <- wtMatNaive%*%t(patientMat[trainInd==0,])
diseaseWtNaive <- t(diseaseWtNaive)
diseaseWtNaive <- as.matrix(diseaseWtNaive)
# write.table(diseaseWtNaive)
diseaseStatus <- diseaseStatus[trainInd==0]
# get ranking
rankvecNaive <- rep(NA,nrow(diseaseWtNaive))
for (i in 1:nrow(diseaseWtNaive)) {
try(rankvecNaive[i] <- which(names(sort(diseaseWtNaive[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
par(mfrow=c(1,2))
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
#### Naive Bayes Results ####
diseaseWtNB <- t(prob)
rankvecNB <- rep(NA,nrow(diseaseWtNB))
for (i in 1:nrow(diseaseWtNB)) {
try(rankvecNB[i] <- which(names(sort(diseaseWtNB[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
library(data.table)  # to install use install.packages('data.table')
library(Matrix)
library(bnlearn)
load("~/tianLab/lzx/patientMat.RData")
#patientMat <- Matrix(patientMat)
diseaseStatus <- paste('OMIM',rep(list.files(path = "~/tianLab/lzx/simulated_patients"),each=100),sep=':')
trainInd <- sample(c(rep(1,500),rep(0,3900)))
patientMatNB <- patientMat[,colSums(patientMat) != 0]
dat <- as.data.frame(cbind(diseaseStatus,patientMatNB))
for (i in 1:ncol(dat)) dat[,i] <- as.factor(dat[,i])
fit <- naive.bayes(dat[trainInd==1,],'diseaseStatus')
pred <- predict(fit, dat[trainInd==0,], prob=T)
prob <- attr(pred,'prob')
#cv <- bn.cv(dat,fit)
library(Matrix)
x <- fread('~/tianLab/lzx/LZX/Predict_Value_ForNoAvailable.txt',sep='\t')
x <- as.data.frame(x)
x <- x[-which(x[,1]=='OMIMID'),] # one weird row, remove
# create disease-HPO frequency matrix
disease <- factor(x[,1]) # turn disease status to a factor
phenotype <- factor(x[,3]) # turn phenotype status to a factor
rowInd <- as.numeric(factor(x[,1])) # obtain row indices
colInd <- as.numeric(factor(x[,3])) # obtain column indices
x[x[,5]=='-' | x[,5] == '',5] <- 0 # missing frequency are set to 0
x[,5] <- as.numeric(x[,5]) # turn frequency to numerics
# create weight matrix
#wtMat <- matrix(0,length(unique(x[,1])),length(unique(x[,3])))
#wtMat[cbind(rowInd,colInd)] <- x[,5]
wtMat <- sparseMatrix(i=rowInd,j=colInd,x=x[,5])
# assign row and column names as diseases and phenotypes
rownames(wtMat) <- levels(disease)
colnames(wtMat) <- levels(phenotype)
wtMatNaive <- wtMat[rownames(wtMat) %in% unique(diseaseStatus),]
wtMatNaive[wtMatNaive>0] <- 1
diseaseWtNaive <- wtMatNaive%*%t(patientMat[trainInd==0,])
diseaseWtNaive <- t(diseaseWtNaive)
diseaseWtNaive <- as.matrix(diseaseWtNaive)
# write.table(diseaseWtNaive)
diseaseStatus <- diseaseStatus[trainInd==0]
# get ranking
rankvecNaive <- rep(NA,nrow(diseaseWtNaive))
for (i in 1:nrow(diseaseWtNaive)) {
try(rankvecNaive[i] <- which(names(sort(diseaseWtNaive[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
par(mfrow=c(1,2))
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
#### Naive Bayes Results ####
diseaseWtNB <- t(prob)
rankvecNB <- rep(NA,nrow(diseaseWtNB))
for (i in 1:nrow(diseaseWtNB)) {
try(rankvecNB[i] <- which(names(sort(diseaseWtNB[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
library(data.table)  # to install use install.packages('data.table')
library(Matrix)
library(bnlearn)
load("~/tianLab/lzx/patientMat.RData")
#patientMat <- Matrix(patientMat)
diseaseStatus <- paste('OMIM',rep(list.files(path = "~/tianLab/lzx/simulated_patients"),each=100),sep=':')
trainInd <- sample(c(rep(1,1000),rep(0,3400)))
patientMatNB <- patientMat[,colSums(patientMat) != 0]
dat <- as.data.frame(cbind(diseaseStatus,patientMatNB))
for (i in 1:ncol(dat)) dat[,i] <- as.factor(dat[,i])
fit <- naive.bayes(dat[trainInd==1,],'diseaseStatus')
pred <- predict(fit, dat[trainInd==0,], prob=T)
prob <- attr(pred,'prob')
#cv <- bn.cv(dat,fit)
library(Matrix)
x <- fread('~/tianLab/lzx/LZX/Predict_Value_ForNoAvailable.txt',sep='\t')
x <- as.data.frame(x)
x <- x[-which(x[,1]=='OMIMID'),] # one weird row, remove
# create disease-HPO frequency matrix
disease <- factor(x[,1]) # turn disease status to a factor
phenotype <- factor(x[,3]) # turn phenotype status to a factor
rowInd <- as.numeric(factor(x[,1])) # obtain row indices
colInd <- as.numeric(factor(x[,3])) # obtain column indices
x[x[,5]=='-' | x[,5] == '',5] <- 0 # missing frequency are set to 0
x[,5] <- as.numeric(x[,5]) # turn frequency to numerics
# create weight matrix
#wtMat <- matrix(0,length(unique(x[,1])),length(unique(x[,3])))
#wtMat[cbind(rowInd,colInd)] <- x[,5]
wtMat <- sparseMatrix(i=rowInd,j=colInd,x=x[,5])
# assign row and column names as diseases and phenotypes
rownames(wtMat) <- levels(disease)
colnames(wtMat) <- levels(phenotype)
wtMatNaive <- wtMat[rownames(wtMat) %in% unique(diseaseStatus),]
wtMatNaive[wtMatNaive>0] <- 1
diseaseWtNaive <- wtMatNaive%*%t(patientMat[trainInd==0,])
diseaseWtNaive <- t(diseaseWtNaive)
diseaseWtNaive <- as.matrix(diseaseWtNaive)
# write.table(diseaseWtNaive)
diseaseStatus <- diseaseStatus[trainInd==0]
# get ranking
rankvecNaive <- rep(NA,nrow(diseaseWtNaive))
for (i in 1:nrow(diseaseWtNaive)) {
try(rankvecNaive[i] <- which(names(sort(diseaseWtNaive[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
par(mfrow=c(1,2))
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
#### Naive Bayes Results ####
diseaseWtNB <- t(prob)
rankvecNB <- rep(NA,nrow(diseaseWtNB))
for (i in 1:nrow(diseaseWtNB)) {
try(rankvecNB[i] <- which(names(sort(diseaseWtNB[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
plot(fit)
fit <- naive.bayes(dat[trainInd==1,1:10],'diseaseStatus')
plot(fit)
plot(fit)
library(data.table)  # to install use install.packages('data.table')
library(Matrix)
library(bnlearn)
load("~/tianLab/lzx/patientMat.RData")
#patientMat <- Matrix(patientMat)
diseaseStatus <- paste('OMIM',rep(list.files(path = "~/tianLab/lzx/simulated_patients"),each=100),sep=':')
trainInd <- sample(c(rep(1,1000),rep(0,3400)))
patientMatNB <- patientMat[,colSums(patientMat) != 0]
dat <- as.data.frame(cbind(diseaseStatus,patientMatNB))
for (i in 1:ncol(dat)) dat[,i] <- as.factor(dat[,i])
fit <- naive.bayes(dat[trainInd==1,],'diseaseStatus')
pred <- predict(fit, dat[trainInd==0,], prob=T)
prob <- attr(pred,'prob')
#cv <- bn.cv(dat,fit)
library(Matrix)
x <- fread('~/tianLab/lzx/LZX/Predict_Value_ForNoAvailable.txt',sep='\t')
x <- as.data.frame(x)
x <- x[-which(x[,1]=='OMIMID'),] # one weird row, remove
# create disease-HPO frequency matrix
disease <- factor(x[,1]) # turn disease status to a factor
phenotype <- factor(x[,3]) # turn phenotype status to a factor
rowInd <- as.numeric(factor(x[,1])) # obtain row indices
colInd <- as.numeric(factor(x[,3])) # obtain column indices
x[x[,5]=='-' | x[,5] == '',5] <- 0 # missing frequency are set to 0
x[,5] <- as.numeric(x[,5]) # turn frequency to numerics
# create weight matrix
#wtMat <- matrix(0,length(unique(x[,1])),length(unique(x[,3])))
#wtMat[cbind(rowInd,colInd)] <- x[,5]
wtMat <- sparseMatrix(i=rowInd,j=colInd,x=x[,5])
# assign row and column names as diseases and phenotypes
rownames(wtMat) <- levels(disease)
colnames(wtMat) <- levels(phenotype)
wtMatNaive <- wtMat[rownames(wtMat) %in% unique(diseaseStatus),]
wtMatNaive[wtMatNaive>0] <- 1
diseaseWtNaive <- wtMatNaive%*%t(patientMat[trainInd==0,])
diseaseWtNaive <- t(diseaseWtNaive)
diseaseWtNaive <- as.matrix(diseaseWtNaive)
# write.table(diseaseWtNaive)
diseaseStatus <- diseaseStatus[trainInd==0]
# get ranking
rankvecNaive <- rep(NA,nrow(diseaseWtNaive))
for (i in 1:nrow(diseaseWtNaive)) {
try(rankvecNaive[i] <- which(names(sort(diseaseWtNaive[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
par(mfrow=c(1,2))
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
#### Naive Bayes Results ####
diseaseWtNB <- t(prob)
rankvecNB <- rep(NA,nrow(diseaseWtNB))
for (i in 1:nrow(diseaseWtNB)) {
try(rankvecNB[i] <- which(names(sort(diseaseWtNB[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
library(data.table)  # to install use install.packages('data.table')
library(Matrix)
library(bnlearn)
load("~/tianLab/lzx/patientMat.RData")
#patientMat <- Matrix(patientMat)
diseaseStatus <- paste('OMIM',rep(list.files(path = "~/tianLab/lzx/simulated_patients"),each=100),sep=':')
trainInd <- sample(c(rep(1,1000),rep(0,3400)))
patientMatNB <- patientMat[,colSums(patientMat) != 0]
dat <- as.data.frame(cbind(diseaseStatus,patientMatNB))
for (i in 1:ncol(dat)) dat[,i] <- as.factor(dat[,i])
fit <- naive.bayes(dat[trainInd==1,],'diseaseStatus')
pred <- predict(fit, dat[trainInd==0,], prob=T)
prob <- attr(pred,'prob')
#cv <- bn.cv(dat,fit)
library(Matrix)
x <- fread('~/tianLab/lzx/LZX/Predict_Value_ForNoAvailable.txt',sep='\t')
x <- as.data.frame(x)
x <- x[-which(x[,1]=='OMIMID'),] # one weird row, remove
# create disease-HPO frequency matrix
disease <- factor(x[,1]) # turn disease status to a factor
phenotype <- factor(x[,3]) # turn phenotype status to a factor
rowInd <- as.numeric(factor(x[,1])) # obtain row indices
colInd <- as.numeric(factor(x[,3])) # obtain column indices
x[x[,5]=='-' | x[,5] == '',5] <- 0 # missing frequency are set to 0
x[,5] <- as.numeric(x[,5]) # turn frequency to numerics
# create weight matrix
#wtMat <- matrix(0,length(unique(x[,1])),length(unique(x[,3])))
#wtMat[cbind(rowInd,colInd)] <- x[,5]
wtMat <- sparseMatrix(i=rowInd,j=colInd,x=x[,5])
# assign row and column names as diseases and phenotypes
rownames(wtMat) <- levels(disease)
colnames(wtMat) <- levels(phenotype)
wtMatNaive <- wtMat[rownames(wtMat) %in% unique(diseaseStatus),]
wtMatNaive[wtMatNaive>0] <- 1
diseaseWtNaive <- wtMatNaive%*%t(patientMat[trainInd==0,])
diseaseWtNaive <- t(diseaseWtNaive)
diseaseWtNaive <- as.matrix(diseaseWtNaive)
# write.table(diseaseWtNaive)
diseaseStatus <- diseaseStatus[trainInd==0]
# get ranking
rankvecNaive <- rep(NA,nrow(diseaseWtNaive))
for (i in 1:nrow(diseaseWtNaive)) {
try(rankvecNaive[i] <- which(names(sort(diseaseWtNaive[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
par(mfrow=c(1,2))
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNaive[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
#### Naive Bayes Results ####
diseaseWtNB <- t(prob)
rankvecNB <- rep(NA,nrow(diseaseWtNB))
for (i in 1:nrow(diseaseWtNB)) {
try(rankvecNB[i] <- which(names(sort(diseaseWtNB[i,],decreasing=T))==diseaseStatus[i]))
}
toKeep <- !is.na(rankvecNaive)
# boxplot
original.parameters<-par()
par(xaxt="n")
#boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep])
boxplot(rankvecNB[toKeep]~diseaseStatus[toKeep],ylim=c(0,50))
lablist<-unique(diseaseStatus[toKeep])
axis(1, at=seq(1.5, length(lablist)+0.5, by=1), labels = FALSE)
text(seq(1.5, length(lablist)+0.5, by=1), par("usr")[3] - 0.2,
labels = lablist, srt = 45, pos = 2, xpd = TRUE, cex=0.8)
diseaseStatus
dim(diseaseWtNaive)
length(unique(diseaseStatus))
library(data.table)
? data.table
library(data.table)
? is.data.table
library(SparseM)
? Matrix
Matrix(1)
? SparseM.hb
library(Matrix)
? Matrix
library(GSA)
? GSA
60*60
60*60*3
1000*60*60*3
1000*80*60*3
1000/80*60*3
1000/80*60*60*3
1000/80*60*60*10
1000/80*60*60*15
library(elmer.data)
library(ELMER.data)
library(?=ELMER.data)
library(help=ELMER.data)
? Union.enhancer
library(globaltest)
? globaltest
setwd('~/tianlab/DRE/GSALightning')
setwd('GSALightning')
devtools::use_vignette("vignette")
