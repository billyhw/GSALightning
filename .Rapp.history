qqplot(qunif(seq(0,1,length=length(deResults$padj))),deResults$padj)
qqline(qunif(seq(0,1,length=length(deResults$padj))),deResults2)
qqlines(qunif(seq(0,1,length=length(deResults$padj))),deResults2)
dev.new(); qqplot(qunif(seq(0,1,length=length(deResults$padj))),deResults2)
library(ELMER)
library(edgeR)
? edgeR
library(DESeq2)
? DESeq
library(GenomicRanges)
? summarizeOverlap
? summarizeOverlaps
#---------- Prepare Gene List (each list is a list of target genes for a DRE) ----------##
#---------- Prepare Gene Expression Data from TCGA ----------##
#
# load expression data#
#
library(ELMER)#
library(DESeq)#
#
mee <- fetch.mee(exp='~/tianLab/DRE/TCGAProcessedData/LUSC/LUSC_RNA.rda',TCGA=T)#
expression <- getExp(mee)#
sampleInfo <- getSample(mee)#
#
cds <- newCountDataSet(countData = floor(expression), conditions = sampleInfo$TN)#
cds <- estimateSizeFactors( cds )#
cds <- estimateDispersions( cds )
? DESeq
library(DESeq2)
? DESeq
library(ELMER)#
library(DESeq)#
#
mee <- fetch.mee(exp='~/tianLab/DRE/TCGAProcessedData/LUSC/LUSC_RNA.rda',TCGA=T)#
expression <- getExp(mee)#
sampleInfo <- getSample(mee)#
#
#cds <- newCountDataSet(countData = floor(expression), conditions = sampleInfo$TN)#
#cds <- estimateSizeFactors( cds )#
#cds <- estimateDispersions( cds )#
#
# get UCSC gene annotation (transcripts level)#
#
txs <- txs()#
#
countData <- floor(expression)#
condition <- factor(sampleInfo$TN)#
dds <- DESeqDataSetFromMatrix(countData, DataFrame(condition), ~ condition)
countData <- matrix(1:100,ncol=4)#
condition <- factor(c("A","A","B","B"))#
dds <- DESeqDataSetFromMatrix(countData, DataFrame(condition), ~ condition)
library(edgeR)
? exacttest
? exactTest
countData <- floor(expression)#
condition <- factor(sampleInfo$TN)#
dds <- DESeqDataSetFromMatrix(countData, DataFrame(condition), ~ condition)
library(DESeq2)
? DESeqDataSet
countData <- matrix(1:100,ncol=4)#
condition <- factor(c("A","A","B","B"))#
dds <- DESeqDataSetFromMatrix(countData, DataFrame(condition), ~ condition)
library(edgeR)
? exactTest
y <- floor(expression)#
d <- DGEList(counts=y, group=sampleInfo$TN)
library(ELMER)#
library(DESeq)#
#
mee <- fetch.mee(exp='~/tianLab/DRE/TCGAProcessedData/LUSC/LUSC_RNA.rda',TCGA=T)#
expression <- getExp(mee)#
sampleInfo <- getSample(mee)#
#
#cds <- newCountDataSet(countData = floor(expression), conditions = sampleInfo$TN)#
#cds <- estimateSizeFactors( cds )#
#cds <- estimateDispersions( cds )#
#
# get UCSC gene annotation (transcripts level)#
#
txs <- txs()#
#
y <- floor(expression)#
d <- DGEList(counts=y, group=sampleInfo$TN)
de <- exactTest(d, dispersion=0.2)
names(de)
de$table
names(de$table)
de <- exactTest(d, dispersion='auto')
de <- exactTest(d, dispersion='common')
de <- exactTest(d, dispersion='trend')
de <- exactTest(d, dispersion='tagwise')
de <- exactTest(d, dispersion='auto')
de <- exactTest(d, dispersion='trended')
de <- exactTest(d, dispersion=0)
de <- exactTest(d, dispersion=0.1)
? DESeq
#---------- Prepare Gene List (each list is a list of target genes for a DRE) ----------##
#---------- Prepare Gene Expression Data from TCGA ----------##
#
# load expression data#
#
library(ELMER)#
library(DESeq)#
#
mee <- fetch.mee(exp='~/tianLab/DRE/TCGAProcessedData/LUSC/LUSC_RNA.rda',TCGA=T)#
expression <- getExp(mee)#
sampleInfo <- getSample(mee)#
#
cds <- newCountDataSet(countData = floor(expression), conditions = sampleInfo$TN)#
cds <- estimateSizeFactors( cds )#
cds <- estimateDispersions( cds )
cds <- estimateDispersions( cds, fitType = 'local' )
cds <- estimateDispersions( cds , fitType = 'local' )
i=1
mee <- fetch.mee(exp=paste('~/tianLab/DRE/TCGAProcessedData/',datavec[i],'/',datavec[i],'_RNA.rda',sep=''),TCGA=T)#
    expression <- getExp(mee)#
    sampleInfo <- getSample(mee)#
#
    cds <- newCountDataSet(countData = floor(expression), conditions = sampleInfo$TN)#
    cds <- estimateSizeFactors( cds )#
    cds <- estimateDispersions( cds , fitType = 'local' )#
#
# get UCSC gene annotation (transcripts level)#
#
    txs <- txs()
? save.image
library(DESeq2)
? DESeq2
? DESeq
cnts <- matrix(rnbinom(n=1000, mu=100, size=1/0.5), ncol=10)#
cond <- factor(rep(1:2, each=5))#
#
# object construction#
dds <- DESeqDataSetFromMatrix(cnts, DataFrame(cond), ~ cond)
? SummerizedExperiment
? SummarizedExperiment
install.packages("Downloads/gmatrix" ,  repos=NULL,#
   configure.args = "#
      --with-arch=sm_30#
      --with-cuda-home=/opt/cuda#
      --with-r-home==/opt/R"#
)
install.packages("~/Downloads/gmatrix" ,  repos=NULL,#
   configure.args = "#
      --with-arch=sm_30#
      --with-cuda-home=/opt/cuda#
      --with-r-home==/opt/R"#
)
install.packages("~/Downloads/gmatrix" ,  repos=NA,#
   configure.args = "#
      --with-arch=sm_30#
      --with-cuda-home=/opt/cuda#
      --with-r-home==/opt/R"#
)
install.packages("~/Downloads/gmatrix" ,  repos=NULL,#
   configure.args = "#
      --with-arch=sm_30#
      --with-cuda-home=/opt/cuda#
      --with-r-home==/opt/R"#
)
x <- matrix(rnorm(10000),100,10)
y <- matrix(rnorm(10000),100,10)
x <- apply(x,1,sort)
matplot(x)
matplot(x,y,type='l',lty=2)
dim(x)
dim(y)
x <- sapply(x,1,sort)
x <- matrix(rnorm(10000),100,10)
x <- sapply(x,1,sort)
x <- sapply(x,1,function(x) sort(x))
x <- apply(x,1,function(x) sort(x))
dim(x)
dim(y)
x <- apply(x,1,function(x) sort(x))
x <- matrix(rnorm(10000),100,10)#
matplot(x,type='l',lty=2)#
lines(colMeans(x),lwd=2)
x <- matrix(rnorm(10000),10,100)#
matplot(x,type='l',lty=2,col=1)#
lines(colMeans(x),lwd=2)
x <- matrix(rnorm(10000),10,100)#
matplot(x,type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)
par(mfrow=c(1:2))#
x <- matrix(rnorm(10000),10,100)#
matplot(x,type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)#
#
y <- rnorm(100)#
matplot(x[y<1,],type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)
par(mfrow=c(1:2))#
x <- matrix(rnorm(10000),10,100)#
matplot(x,type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)#
#
y <- rnorm(100)#
matplot(x[y<-0.5,],type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)
y < -0.5
y
par(mfrow=c(1:2))#
x <- matrix(rnorm(10000),10,100)#
matplot(x,type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)#
#
y <- rnorm(100)#
matplot(x[y <= -0.5,],type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)
u
y
y < -0.5
dim(x)
par(mfrow=c(1:2))#
x <- matrix(rnorm(10000),10,100)#
matplot(x,type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)#
#
y <- rnorm(100)#
matplot(x[,y <= -0.5],type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)
par(mfrow=c(1:2))#
x <- matrix(rnorm(10000),10,100)#
matplot(x,type='l',lty=3,col=1)#
lines(colMeans(x),lwd=3)#
#
y <- rnorm(100)#
matplot(x[,y <= -0.5],type='l',lty=3,col=1)#
lines(colMeans(x[,y <= -0.5]),lwd=3)
library(GO)
library(GOstat)
library(GOstats)
library(GO.db)
? GO.db
library(GOstats)
? GOstats
? set.prob.table
library(csbl.go)
? set.prob.table
set.prob.table(organism=TAXONOMY.HUMAN, type="similarity")
set.prob.table
? set.prob.table
? GOstats
library(topGO)
? topGO
library(GOSemSim)
? GOSemSim
library(topicmodels)
? lda
? LDA
library(category)
library(Category)
? gseattperm
source('GSAfast.r')#
system.time(tmp <- bigGSA(ExpressionSet(expression),factor(sampleInfo$TN),mat[1:100,],1000,method='ttest'))#
#
library(Category)#
system.time(tmp2 <- gseattperm(ExpressionSet(expression),factor(sampleInfo$TN),mat[1:100,],1000))
load('~/tianLab/DRE/GSASpeedTrailResultsThu Sep 24 15:32:06 2015.RData')
timematPerm
timematGS
source("https://bioconductor.org/biocLite.R")#
biocLite("globaltest")
load("/Users/billyhw/tianLab/DRE/GSASpeedTrailResultsFri Sep 25 06:51:01 2015.RData")
timematPerm
bob <- matrix(1:9,3,3)
mean(bob)
sd(bob)
sd(as.vector(bob))
load('~/tianLab/DRE/GSASpeedTrailResultsMon Sep 28 01:33:22 2015.RData')
timemat
library(GSA)
? GSA
library(sigPathway)
? runSigPathway
? mean
library(sigPathway)
? sigPathway
library(glmnet)
? glmnet
library(ELMER)
warnings()
? ELMER
library(GSA)
? GSA
? ELMER
? runSigPathway
? glmnet
library(data.table)
? is.data.table
is.data.table
? is.data.table
library(Matrix)
? Matrix
sparseMatrix
? Matrix::sparseMatrix
library(GSALightning)
? GSALightning
? data.table
pkgname <- "GSALightning"#
source(file.path(R.home("share"), "R", "examples-header.R"))#
options(warn = 1)#
library('GSALightning')#
#
base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')#
cleanEx()#
nameEx("GSALight")#
### * GSALight#
#
flush(stderr()); flush(stdout())#
#
### Name: GSALight#
### Title: Fast Permutation-based Gene Set Analysis#
### Aliases: GSALight#
#
### ** Examples#
# see the vignette for more examples#
#
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
#
head(GSAmean)#
head(GSAabs)
library(data.table)
pkgname <- "GSALightning"#
source(file.path(R.home("share"), "R", "examples-header.R"))#
options(warn = 1)#
library('GSALightning')#
#
base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')#
cleanEx()#
nameEx("GSALight")#
### * GSALight#
#
flush(stderr()); flush(stdout())#
#
### Name: GSALight#
### Title: Fast Permutation-based Gene Set Analysis#
### Aliases: GSALight#
#
### ** Examples#
# see the vignette for more examples#
#
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
#
head(GSAmean)#
head(GSAabs)
library(sparseMatrix)
library(Matrix)
pkgname <- "GSALightning"#
source(file.path(R.home("share"), "R", "examples-header.R"))#
options(warn = 1)#
library('GSALightning')#
#
base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')#
cleanEx()#
nameEx("GSALight")#
### * GSALight#
#
flush(stderr()); flush(stdout())#
#
### Name: GSALight#
### Title: Fast Permutation-based Gene Set Analysis#
### Aliases: GSALight#
#
### ** Examples#
# see the vignette for more examples#
#
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
#
head(GSAmean)#
head(GSAabs)
genesets
debug(GSALight)
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')
mat
dim(mat)
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')
class(mat)
rowSums(mat)
mat
dim(mat)
coerce(mat, 'dgeMatrix')
mat <- coerce(mat, 'dgeMatrix')
mat <- as(mat, 'dgeMatrix')
? as
mat <- as(mat, 'dgeMatrix')
mat
class(mat)
Q
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')
rowSums(mat)
Matrix()
mat%*%rep(1,ncol(mat))
library(GSALightning)
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gs')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'absmean', restandardize = FALSE, rmGSGenes = 'gs')#
#
head(GSAmean)#
head(GSAabs)
? permTestLight
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
results <- permTestLight(x, y, nperm = 1000, method = 'mean')#
head(results)
? permTestLight
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
results <- permTestLight(x, y, nperm = 1000, method = 'mean')#
head(results)
library(GSALightning)
? permTestLight
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
results <- permTestLight(x, y, nperm = 1000, method = 'mean')#
head(results)
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'absmean', restandardize = FALSE, rmGSGenes = 'gene')#
#
head(GSAmean)#
head(GSAabs)
? data.table
library(GSALightning)
GSALightning
GSALight
Matrix::Matrix
library(devtools)
? create
library(GSALightning)
? GSALight
? permTestLight
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
results <- permTestLight(x, y, nperm = 1000, method = 'mean')#
head(results)
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'absmean', restandardize = FALSE, rmGSGenes = 'gene')#
#
head(GSAmean)#
head(GSAabs)
? rowtests
rowtest
rowtests
library(GSALightning)
? GSALight
rowtests
GSALigh
GSALight
library(GSALightning)
GSALightning
GSALight
? GSALight
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'absmean', restandardize = FALSE, rmGSGenes = 'gene')#
#
head(GSAmean)#
head(GSAabs)
library(GSALightning)
? GSALight
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'absmean', restandardize = FALSE, rmGSGenes = 'gene')#
#
head(GSAmean)#
head(GSAabs)
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
results <- permTestLight(x, y, nperm = 1000, method = 'mean')#
head(results)
library(GSALightning)
? GSALight
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'absmean', restandardize = FALSE, rmGSGenes = 'gene')#
#
head(GSAmean)#
head(GSAabs)
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
results <- permTestLight(x, y, nperm = 1000, method = 'mean')#
head(results)
library(GSALightning)
? GSALightning
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
#create some random gene sets#
genesets=vector("list",50)#
for(i in 1:50){#
 genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")#
}#
names(genesets)=paste("set",as.character(1:50),sep="")#
#
GSAmean <- GSALight(x, y, genesets, nperm = 1000, method = 'mean', restandardize = FALSE, rmGSGenes = 'gene')#
GSAabs <- GSALight(x, y, genesets, nperm = 1000, method = 'absmean', restandardize = FALSE, rmGSGenes = 'gene')#
#
head(GSAmean)#
head(GSAabs)
set.seed(100)#
x <- matrix(rnorm(1000*20),ncol=20)#
rownames(x) <- paste("g",1:1000,sep="")#
dd <- sample(1:1000,size=100)#
#
u <- matrix(2*rnorm(100),ncol=10,nrow=100)#
x[dd,11:20] <- x[dd,11:20]+u#
y <- factor(c(rep('Control',10),rep('Experiment',10)))#
#
results <- permTestLight(x, y, nperm = 1000, method = 'mean')#
head(results)
library(GSALightning)
? GSALight
setwd('~/tianlab/DRE/GSALightning')#
#
library(readr)#
library(data.table)#
library(Matrix)#
source('../GSALightning.r')#
#
#--- read expression data ---##
expression <- read.table('TCGA_BRCA.txt')#
expression <- as.matrix(expression)#
sampleInfo <- read.table('TCGA_BRCA_SampleInfo.txt')#
#
#--- read DRE target genes list ---##
targetGenes <- fread('DRETargetGenes.txt')#
setnames(targetGenes,c('geneSet','gene'))
setwd('GSALightning/')
save(expression, 'TCGA_BRCA.rda')
save(expression, file = 'TCGA_BRCA.rda')
save(sampleInfo, file = 'TCGA_BRCA_SampleInfo.rda')
save(targetGenes, file = 'DRETargetGenes.rda')
prompt(expression)
prompt(sampleInfo)
prompt(targetGenes)
save(targetGenes, file = 'targetGenes.rda')
save(sampleInfo, file = 'sampleInfo.rda')
save(expression, file = 'expression.rda')
sum(sampleInfo$TN=='Control')
dim(expression)
rownames(expression)
? GSALight
dim(targetGenes)
length(unique(targetGenes$DRE))
length(unique(targetGenes$geneSet))
class(expression)
targetGenes
